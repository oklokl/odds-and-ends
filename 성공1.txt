package com.example.myapplication // 실제 패키지 이름으로 변경해주세요. (이전과 동일하게 유지)

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context // Context를 사용하기 위해 import
import android.os.Bundle
import android.widget.Toast // 사용자에게 복사 완료 메시지를 보여주기 위해 import
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext // Composable에서 Context를 얻기 위해 import
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                WordReplacerApp()
            }
        }
    }
}

@Composable
fun WordReplacerApp() {
    // UI 상태를 관리하는 mutableStateOf 변수들
    var targetWord by remember { mutableStateOf("") }
    var replacement by remember { mutableStateOf("") }
    var originalText by remember { mutableStateOf("") }
    var replacedText by remember { mutableStateOf("") }

    // Composable 함수 내에서 Context를 얻는 방법
    val context = LocalContext.current // 클립보드 서비스 접근을 위해 Context 필요

    Column(modifier = Modifier
        .fillMaxSize()
        .padding(16.dp)) {

        OutlinedTextField(
            value = targetWord,
            onValueChange = { targetWord = it },
            label = { Text("대체할 단어") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = replacement,
            onValueChange = { replacement = it },
            label = { Text("대체될 단어") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = originalText,
            onValueChange = { originalText = it },
            label = { Text("여기에 전체 텍스트를 입력하세요...") },
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp),
            maxLines = 10
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Action 버튼들을 가로로 배치하기 위해 Row 사용
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceAround // 버튼들 사이에 공간 고르게 분배
        ) {
            Button(
                onClick = {
                    replacedText = originalText.replace(targetWord, replacement)
                },
                modifier = Modifier.weight(1f) // 버튼이 Row 공간을 동일하게 나눠 가지도록 설정
            ) {
                Text("단어 대체")
            }

            Spacer(modifier = Modifier.width(8.dp)) // 버튼 사이 간격

            // 클립보드 복사 버튼
            Button(
                onClick = {
                    if (replacedText.isNotEmpty()) {
                        // 1. ClipboardManager 서비스 가져오기
                        val clipboardManager = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                        // 2. ClipData 객체 생성 (텍스트 데이터를 담기 위함)
                        val clipData = ClipData.newPlainText("Replaced Text", replacedText)
                        // 3. 클립보드에 데이터 설정
                        clipboardManager.setPrimaryClip(clipData)

                        // 4. 사용자에게 복사 완료 메시지 표시
                        Toast.makeText(context, "결과가 클립보드에 복사되었습니다.", Toast.LENGTH_SHORT).show()
                    } else {
                        Toast.makeText(context, "복사할 내용이 없습니다.", Toast.LENGTH_SHORT).show()
                    }
                },
                modifier = Modifier.weight(1f), // 버튼이 Row 공간을 동일하게 나눠 가지도록 설정
                enabled = replacedText.isNotEmpty() // 결과 텍스트가 있을 때만 버튼 활성화
            ) {
                Text("결과 복사")
            }
        }


        Spacer(modifier = Modifier.height(16.dp))

        if (replacedText.isNotEmpty()) {
            Text("결과:", fontSize = 18.sp, style = MaterialTheme.typography.headlineSmall)
            Text(
                text = replacedText,
                modifier = Modifier.padding(top = 8.dp),
                style = MaterialTheme.typography.bodyLarge
            )
        }
    }
}