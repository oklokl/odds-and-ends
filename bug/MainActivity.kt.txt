package com.krdondon.Replacestring

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import com.google.android.gms.ads.AdRequest
import com.google.android.gms.ads.AdSize // AdSize import 확인
import com.google.android.gms.ads.AdView
import com.google.android.gms.ads.MobileAds
import com.google.android.gms.ads.AdListener
import com.google.android.gms.ads.LoadAdError

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // AdMob SDK 초기화 (앱 시작 시 한 번만 호출)
        MobileAds.initialize(this) {} // 초기화 완료 리스너는 필수는 아니지만, 명시적으로 붙이는 것이 좋습니다.

        setContent {
            MaterialTheme {
                WordReplacerApp()
            }
        }
    }
}

@Composable
fun WordReplacerApp() {
    var targetWord by remember { mutableStateOf("") }
    var replacement by remember { mutableStateOf("") }
    var originalText by remember { mutableStateOf("") }
    var replacedText by remember { mutableStateOf("") }

    // 'context'는 WordReplacerApp 스코프 내에서만 유효하며, 여기서 재할당되지 않습니다.
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.SpaceBetween
    ) {
        Column(modifier = Modifier.weight(1f)) {
            OutlinedTextField(
                value = targetWord,
                onValueChange = { targetWord = it },
                label = { Text("대체할 단어") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )

            Spacer(modifier = Modifier.height(8.dp))

            OutlinedTextField(
                value = replacement,
                onValueChange = { replacement = it },
                label = { Text("대체될 단어") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )

            Spacer(modifier = Modifier.height(8.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
            ) {
                OutlinedTextField(
                    value = originalText,
                    onValueChange = { originalText = it },
                    label = { Text("여기에 전체 텍스트를 입력하세요...") },
                    modifier = Modifier
                        .fillMaxSize()
                        .verticalScroll(rememberScrollState()),
                )

                Button(
                    onClick = {
                        targetWord = ""
                        replacement = ""
                        originalText = ""
                        replacedText = ""
                        Toast.makeText(context, "모든 입력값이 지워졌습니다.", Toast.LENGTH_SHORT).show()
                    },
                    modifier = Modifier
                        .align(Alignment.BottomEnd)
                        .padding(8.dp)
                ) {
                    Text("Clean")
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceAround
            ) {
                Button(
                    onClick = {
                        replacedText = originalText.replace(targetWord, replacement)
                    },
                    modifier = Modifier.weight(1f)
                ) {
                    Text("단어 대체")
                }

                Spacer(modifier = Modifier.width(8.dp))

                Button(
                    onClick = {
                        if (replacedText.isNotEmpty()) {
                            val clipboardManager = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                            val clipData = ClipData.newPlainText("Replaced Text", replacedText)
                            clipboardManager.setPrimaryClip(clipData)
                            Toast.makeText(context, "결과가 클립보드에 복사되었습니다.", Toast.LENGTH_SHORT).show()
                        } else {
                            Toast.makeText(context, "복사할 내용이 없습니다.", Toast.LENGTH_SHORT).show()
                        }
                    },
                    modifier = Modifier.weight(1f),
                    enabled = replacedText.isNotEmpty()
                ) {
                    Text("결과 복사")
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            OutlinedTextField(
                value = replacedText,
                onValueChange = { replacedText = it },
                label = { Text("수정 가능한 결과") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 8.dp)
                    .verticalScroll(rememberScrollState())
                    .weight(1f)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // AdMob 배너 광고
        AdBanner(
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp) // 높이 명시
                .align(Alignment.CenterHorizontally)
        )
    }
}

@Composable
fun AdBanner(modifier: Modifier = Modifier) {
    // 'context'는 AdBanner 스코프 내에서만 유효하며, 여기서 재할당되지 않습니다.
    val context = LocalContext.current
    AndroidView(
        modifier = modifier,
        factory = { ctx -> // 'ctx'는 AdView 생성 시 사용되는 Context입니다.
            AdView(ctx).apply {
                // 중요: 이 ID는 현재 테스트 광고 단위 ID입니다.
                // 실제 앱 배포 시에는 반드시 본인의 AdMob 배너 광고 단위 ID로 변경해야 합니다!
                // 현재 사용 중인 테스트 광고 단위 ID: ca-app-pub-3940256099942544/6300978111
                adUnitId = "ca-app-pub-3940256099942544/6300978111" // 테스트 ID 유지
                setAdSize(AdSize.BANNER) // <<<=== 이 부분이 'setAdSize' 메서드 사용으로 확실히 수정되었습니다.
                loadAd(AdRequest.Builder().build())

                // 광고 로드 리스너 추가 (디버깅용)
                adListener = object : AdListener() {
                    override fun onAdLoaded() {
                        Log.d("AdMob", "광고 로드 성공!")
                    }

                    override fun onAdFailedToLoad(adError: LoadAdError) {
                        Log.e("AdMob", "광고 로드 실패: ${adError.message} (코드: ${adError.code})")
                        // 실패 원인 코드 확인:
                        // 0: ERROR_CODE_INTERNAL_ERROR
                        // 1: ERROR_CODE_INVALID_REQUEST
                        // 2: ERROR_CODE_NETWORK_ERROR
                        // 3: ERROR_CODE_NO_FILL
                    }

                    override fun onAdOpened() { Log.d("AdMob", "광고 열림") }
                    override fun onAdClicked() { Log.d("AdMob", "광고 클릭됨") }
                    override fun onAdClosed() { Log.d("AdMob", "광고 닫힘") }
                }
            }
        },
        update = { adView ->
            // 광고 뷰 업데이트 로직 (필요 시)
        }
    )
}
