package com.krdondon.exorcismprayer

import android.content.ComponentName
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.media3.session.MediaController
import androidx.media3.session.SessionToken
import com.google.common.util.concurrent.ListenableFuture
import com.google.common.util.concurrent.MoreExecutors
import com.krdondon.exorcismprayer.ui.theme.ExorcismPrayerTheme

class MainActivity : ComponentActivity() {

    private var mediaControllerFuture: ListenableFuture<MediaController>? = null
    private var mediaController: MediaController? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // 1. 서비스 실행
        val serviceIntent = Intent(this, PlaybackService::class.java)
        ContextCompat.startForegroundService(this, serviceIntent)

        setContent {
            var mediaControllerState by remember { mutableStateOf<MediaController?>(null) }
            var currentMediaIndex by remember { mutableIntStateOf(0) }
            var isPlaying by remember { mutableStateOf(false) }

            ExorcismPrayerTheme {
                if (mediaControllerState != null) {
                    MediaScreen(
                        mediaController = mediaControllerState!!,
                        currentMediaIndex = currentMediaIndex,
                        onMediaIndexChange = { newIndex -> currentMediaIndex = newIndex },
                        isPlaying = isPlaying,
                        onIsPlayingChange = { nowPlaying -> isPlaying = nowPlaying }
                    )
                } else {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text("준비 중...", fontSize = 20.sp, fontWeight = FontWeight.Bold)
                    }
                }
            }

            // 2. MediaController 연결
            LaunchedEffect(Unit) {
                val sessionToken = SessionToken(this@MainActivity, ComponentName(this@MainActivity, PlaybackService::class.java))
                mediaControllerFuture = MediaController.Builder(this@MainActivity, sessionToken).buildAsync()
                mediaControllerFuture?.addListener({
                    mediaController = mediaControllerFuture?.get()
                    mediaControllerState = mediaController
                }, MoreExecutors.directExecutor())
            }
        }
    }

    override fun onStop() {
        super.onStop()
        mediaControllerFuture?.let {
            MediaController.releaseFuture(it)
            mediaControllerFuture = null
        }
        mediaController = null
    }

    override fun onDestroy() {
        stopService(Intent(this, PlaybackService::class.java))
        super.onDestroy()
    }
}
