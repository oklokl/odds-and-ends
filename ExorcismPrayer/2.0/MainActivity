package com.krdondon.exorcismprayer

import android.content.ComponentName
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.media3.session.MediaController
import androidx.media3.session.SessionToken
import com.google.common.util.concurrent.ListenableFuture
import com.google.common.util.concurrent.MoreExecutors
import com.krdondon.exorcismprayer.ui.theme.ExorcismPrayerTheme
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.LifecycleOwner

class MainActivity : ComponentActivity() {

    private var mediaControllerFuture: ListenableFuture<MediaController>? = null
    private var mediaController: MediaController? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // 서비스는 앱 시작 시 한 번만 실행
        val serviceIntent = Intent(this, PlaybackService::class.java)
        ContextCompat.startForegroundService(this, serviceIntent)

        setContent {
            var mediaControllerState by remember { mutableStateOf<MediaController?>(null) }
            var currentMediaIndex by remember { mutableIntStateOf(0) }
            var isPlaying by remember { mutableStateOf(false) }

            // LifecycleEventObserver를 사용하여 onStart/onStop에서 MediaController 연결/해제
            val lifecycleObserver = remember {
                LifecycleEventObserver { _, event ->
                    when (event) {
                        Lifecycle.Event.ON_START -> {
                            // 액티비티가 화면에 나타날 때 MediaController 연결
                            val sessionToken = SessionToken(this@MainActivity, ComponentName(this@MainActivity, PlaybackService::class.java))
                            mediaControllerFuture = MediaController.Builder(this@MainActivity, sessionToken).buildAsync()
                            mediaControllerFuture?.addListener({
                                mediaController = mediaControllerFuture?.get()
                                mediaControllerState = mediaController

                                // UI 상태 동기화 (재생 상태, 현재 미디어 아이템)
                                mediaController?.let { controller ->
                                    isPlaying = controller.isPlaying
                                    val index = mediaList.indexOfFirst { it.title == controller.mediaMetadata.title }
                                    if (index != -1) currentMediaIndex = index
                                }
                            }, MoreExecutors.directExecutor())
                        }
                        Lifecycle.Event.ON_STOP -> {
                            // 액티비티가 화면에서 사라질 때 MediaController 해제
                            mediaControllerFuture?.let {
                                MediaController.releaseFuture(it)
                                mediaControllerFuture = null
                            }
                            mediaController = null
                            mediaControllerState = null
                        }
                        else -> {}
                    }
                }
            }

            DisposableEffect(lifecycleObserver) {
                this@MainActivity.lifecycle.addObserver(lifecycleObserver)
                onDispose {
                    this@MainActivity.lifecycle.removeObserver(lifecycleObserver)
                }
            }

            ExorcismPrayerTheme {
                if (mediaControllerState != null) {
                    MediaScreen(
                        mediaController = mediaControllerState!!,
                        currentMediaIndex = currentMediaIndex,
                        onMediaIndexChange = { newIndex -> currentMediaIndex = newIndex },
                        isPlaying = isPlaying,
                        onIsPlayingChange = { nowPlaying -> isPlaying = nowPlaying }
                    )
                } else {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text("준비 중...", fontSize = 20.sp, fontWeight = FontWeight.Bold)
                    }
                }
            }
        }
    }

    override fun onDestroy() {
        stopService(Intent(this, PlaybackService::class.java))
        super.onDestroy()
    }
}
