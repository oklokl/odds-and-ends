package com.krdonon.timer

import android.app.AlarmManager
import android.app.KeyguardManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.CountDownTimer
import android.os.Handler
import android.os.Looper
import android.text.InputType
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.LinearLayout
import android.widget.TextView
import androidx.appcompat.app.AlertDialog
import androidx.fragment.app.Fragment
import androidx.fragment.app.commit
import androidx.lifecycle.ViewModelProvider
import com.krdonon.timer.alarm.AlarmReceiver
import com.krdonon.timer.alarm.AlarmService
import java.util.Calendar
import java.util.Locale
import java.util.concurrent.TimeUnit
import kotlin.math.max

class TimerFragment : Fragment() {

    private lateinit var timerText: TextView
    private lateinit var currentTimeText: TextView
    private lateinit var nextTimeText: TextView
    private lateinit var btnStart: Button
    private lateinit var btnReset: Button
    private lateinit var btnAdd: Button
    private lateinit var btn10: Button
    private lateinit var btn15: Button
    private lateinit var btn30: Button
    private lateinit var btnAlertMode: Button
    private lateinit var extraTimersContainer: LinearLayout

    private val handler = Handler(Looper.getMainLooper())
    private var ticker: Runnable? = null

    private var timeLeftInMillis: Long = 0L
    private var mainTimer: CountDownTimer? = null
    private var running = false

    private lateinit var viewModel: TimerViewModel

    private val alarmRequestCode = 10011
    private fun alarmPendingIntent(label: String = "메인 타이머"): PendingIntent {
        val intent = Intent(requireContext(), AlarmReceiver::class.java).apply {
            putExtra(AlarmService.EXTRA_LABEL, label)
        }
        return PendingIntent.getBroadcast(
            requireContext(),
            alarmRequestCode,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
    }

    private fun scheduleExactAlarm(triggerAtMillis: Long, label: String = "메인 타이머") {
        val am = requireContext().getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val pi = alarmPendingIntent(label)
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                if (am.canScheduleExactAlarms())
                    am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAtMillis, pi)
                else am.set(AlarmManager.RTC_WAKEUP, triggerAtMillis, pi)
            } else {
                am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAtMillis, pi)
            }
        } catch (_: SecurityException) {
            am.set(AlarmManager.RTC_WAKEUP, triggerAtMillis, pi)
        }
    }

    private fun cancelExactAlarm() {
        val am = requireContext().getSystemService(Context.ALARM_SERVICE) as AlarmManager
        runCatching { am.cancel(alarmPendingIntent()) }
    }

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        val v = inflater.inflate(R.layout.fragment_timer, container, false)

        viewModel = ViewModelProvider(requireActivity())[TimerViewModel::class.java]

        timerText = v.findViewById(R.id.timerText)
        currentTimeText = v.findViewById(R.id.currentTimeText)
        nextTimeText = v.findViewById(R.id.nextTimeText)
        btnStart = v.findViewById(R.id.btnStartTimer)
        btnReset = v.findViewById(R.id.btnResetTimer)
        btnAdd   = v.findViewById(R.id.btnAddTimer)
        btn10 = v.findViewById(R.id.btnPreset10)
        btn15 = v.findViewById(R.id.btnPreset15)
        btn30 = v.findViewById(R.id.btnPreset30)
        extraTimersContainer = v.findViewById(R.id.extraTimersContainer)

        // 알림모드 토글
        btnAlertMode = v.findViewById(R.id.btnAlertMode)
        val alarmPrefs = requireContext().getSharedPreferences(AlarmService.PREFS, Context.MODE_PRIVATE)
        var currentMode = alarmPrefs.getString(AlarmService.KEY_ALERT_MODE, AlarmService.MODE_SOUND)
            ?: AlarmService.MODE_SOUND
        fun updateAlertModeButton() { btnAlertMode.text = if (currentMode == AlarmService.MODE_VIBRATE) "진동" else "소리" }
        updateAlertModeButton()
        btnAlertMode.setOnClickListener {
            currentMode = if (currentMode == AlarmService.MODE_VIBRATE) AlarmService.MODE_SOUND else AlarmService.MODE_VIBRATE
            alarmPrefs.edit().putString(AlarmService.KEY_ALERT_MODE, currentMode).apply()
            updateAlertModeButton()
        }

        // 숫자패드 이동
        val goInput: (View) -> Unit = {
            parentFragmentManager.commit {
                replace(R.id.fragment_container, NumberPadFragment())
                addToBackStack(null)
            }
        }
        timerText.setOnClickListener(goInput)
        nextTimeText.setOnClickListener(goInput)

        // 숫자패드 결과 수신
        parentFragmentManager.setFragmentResultListener("numberPadResult", viewLifecycleOwner) { _, bundle ->
            val targetAt = bundle.getLong("targetAt", -1L)
            val dur = bundle.getLong("duration", -1L)
            when {
                targetAt > 0L -> setTargetAt(targetAt)
                dur >= 0L     -> setTargetTime(dur)
            }
        }

        // 시각 표기
        ticker = object : Runnable {
            override fun run() { updateNow(); handler.postDelayed(this, 100L) }
        }
        handler.post(ticker!!)

        btn10.setOnClickListener { setDurationAndPreview(TimeUnit.MINUTES.toMillis(10)) }
        btn15.setOnClickListener { setDurationAndPreview(TimeUnit.MINUTES.toMillis(15)) }
        btn30.setOnClickListener { setDurationAndPreview(TimeUnit.MINUTES.toMillis(30)) }

        btnStart.setOnClickListener { if (running) pauseMain() else startMain() }
        btnReset.setOnClickListener { resetMain() }
        btnAdd.setOnClickListener   { addNewBlock(timeLeftInMillis) }

        // 보조 타이머 UI 복원
        restoreExtrasUI()

        // 초기 렌더 & 메인 복원
        timerText.text = formatDuration4(0L)
        nextTimeText.text = getString(R.string.next_time_prefix, formatDuration4(0L))
        btnStart.text = getString(R.string.btn_start)
        restoreMainState()

        return v
    }

    override fun onResume() {
        super.onResume()
        val p = requireContext().getSharedPreferences(AlarmService.PREFS, Context.MODE_PRIVATE)
        val isRinging = p.getBoolean(AlarmService.KEY_RINGING, false)
        val startedFromKeyguard = p.getBoolean(AlarmService.KEY_STARTED_FROM_KEYGUARD, false)
        val km = requireContext().getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager
        if (isRinging && startedFromKeyguard && !km.isKeyguardLocked) {
            AlarmService.stop(requireContext())
        }
    }

    // -------- 보조 타이머 UI --------
    private fun restoreExtrasUI() {
        extraTimersContainer.removeAllViews()
        viewModel.extras.value?.forEach { addBlockTimerView(it) }
    }

    private fun addNewBlock(initialMs: Long) {
        if (initialMs <= 0L) return
        val state = viewModel.addExtra(label = "타이머", durationMs = initialMs) // ★ running=false 로 추가됨
        addBlockTimerView(state)
    }

    private fun addBlockTimerView(state: TimerViewModel.ExtraTimer) {
        val root = layoutInflater.inflate(R.layout.timer_block, extraTimersContainer, false)
        val labelView = root.findViewById<TextView>(R.id.blockLabel)
        val tv       = root.findViewById<TextView>(R.id.blockTimerText)
        val btnStart = root.findViewById<Button>(R.id.blockStartBtn)
        val btnDel   = root.findViewById<Button>(R.id.blockDeleteBtn)

        fun render() {
            tv.text = formatDuration4(state.remainingMs)
            btnStart.text = if (state.running) getString(R.string.btn_pause) else getString(R.string.btn_start)
            labelView.text = state.label
        }
        render()

        tv.setOnClickListener { setTargetTime(state.remainingMs) }

        labelView.setOnClickListener {
            showRenameDialog(labelView) { newLabel ->
                viewModel.renameExtra(state.id, newLabel)
                state.label = newLabel
                render()
            }
        }

        // 보조 타이머용 CountDownTimer (UI 전용)
        var cd: CountDownTimer? = null

        fun stopCd() { cd?.cancel(); cd = null }

        fun startCd() {
            stopCd()
            if (state.remainingMs <= 0L) return
            cd = object : CountDownTimer(state.remainingMs, 10L) {
                override fun onTick(ms: Long) {
                    state.remainingMs = ms
                    viewModel.setRemaining(state.id, ms)
                    tv.text = formatDuration4(ms)
                }
                override fun onFinish() {
                    state.remainingMs = 0L
                    viewModel.setRemaining(state.id, 0L)
                    viewModel.setRunning(state.id, false)
                    btnStart.text = getString(R.string.btn_start)
                    tv.text = formatDuration4(0L)
                    AlarmService.start(requireContext(), state.label)
                    // 알림바 진행 제거
                    runCatching { ClockService.stopExtraTimer(requireContext(), state.id) }
                }
            }.start()
        }

        btnStart.setOnClickListener {
            if (state.running) {
                // 일시정지
                stopCd()
                viewModel.setRunning(state.id, false)
                state.running = false
                btnStart.text = getString(R.string.btn_start)
                runCatching { ClockService.stopExtraTimer(requireContext(), state.id) }
            } else {
                // 시작
                viewModel.setRunning(state.id, true)
                state.running = true
                btnStart.text = getString(R.string.btn_pause)
                startCd()
                runCatching { ClockService.startExtraTimer(requireContext(), state.id, state.label, state.remainingMs) }
            }
        }

        btnDel.setOnClickListener {
            stopCd()
            viewModel.removeExtra(state.id)
            runCatching { ClockService.stopExtraTimer(requireContext(), state.id) }
            extraTimersContainer.removeView(root)
        }

        // 복원 시 달리던 것만 재개
        if (state.running) {
            startCd()
            runCatching { ClockService.startExtraTimer(requireContext(), state.id, state.label, state.remainingMs) }
        }

        extraTimersContainer.addView(root)
    }

    // -------- 메인 타이머 --------
    private fun setTargetAt(targetAtMillis: Long) {
        timeLeftInMillis = (targetAtMillis - System.currentTimeMillis()).coerceAtLeast(0L)
        updateMainTimerUI()
    }

    private fun setTargetTime(durationMillis: Long) {
        timeLeftInMillis = durationMillis.coerceAtLeast(0L)
        updateMainTimerUI()
    }

    private fun setDurationAndPreview(durationMillis: Long) {
        timeLeftInMillis = durationMillis.coerceAtLeast(0L)
        updateMainTimerUI()
    }

    private fun startMain() {
        if (timeLeftInMillis <= 0L) return
        mainTimer?.cancel()
        val endAt = System.currentTimeMillis() + timeLeftInMillis

        mainTimer = object : CountDownTimer(timeLeftInMillis, 10L) {
            override fun onTick(ms: Long) { timeLeftInMillis = ms; updateMainTimerUI() }
            override fun onFinish() {
                running = false
                btnStart.text = getString(R.string.btn_start)
                timerText.text = formatDuration4(0L)
                nextTimeText.text = getString(R.string.next_time_prefix, formatDuration4(0L))
                cancelExactAlarm()
                runCatching { ClockService.stopTimer(requireContext()) }
                viewModel.setMain(null, false)
            }
        }.start()

        scheduleExactAlarm(endAt, "메인 타이머")
        runCatching { ClockService.startTimer(requireContext(), timeLeftInMillis) }

        running = true
        btnStart.text = getString(R.string.btn_pause)
        viewModel.setMain(endAt, true)
    }

    private fun pauseMain() {
        mainTimer?.cancel()
        running = false
        btnStart.text = getString(R.string.btn_start)
        cancelExactAlarm()
        runCatching { ClockService.stopTimer(requireContext()) }
        viewModel.setMain(null, false)
    }

    private fun resetMain() {
        mainTimer?.cancel()
        running = false
        timeLeftInMillis = 0L
        timerText.text = formatDuration4(0L)
        btnStart.text = getString(R.string.btn_start)
        nextTimeText.text = getString(R.string.next_time_prefix, formatDuration4(0L))
        cancelExactAlarm()
        runCatching { ClockService.stopTimer(requireContext()) }
        viewModel.setMain(null, false)
    }

    private fun updateMainTimerUI() {
        timerText.text = formatDuration4(timeLeftInMillis)
        nextTimeText.text = getString(R.string.next_time_prefix, formatDuration4(timeLeftInMillis))
    }

    private fun restoreMainState() {
        val endAt = viewModel.mainEndAtMs.value
        val runningSaved = viewModel.mainRunning.value == true
        if (!runningSaved || endAt == null) return

        val remain = endAt - System.currentTimeMillis()
        if (remain <= 0L) {
            viewModel.setMain(null, false)
            updateMainTimerUI()
            return
        }
        timeLeftInMillis = remain
        updateMainTimerUI()
        running = true
        btnStart.text = getString(R.string.btn_pause)

        mainTimer?.cancel()
        mainTimer = object : CountDownTimer(remain, 10L) {
            override fun onTick(ms: Long) { timeLeftInMillis = ms; updateMainTimerUI() }
            override fun onFinish() {
                running = false
                btnStart.text = getString(R.string.btn_start)
                timerText.text = formatDuration4(0L)
                nextTimeText.text = getString(R.string.next_time_prefix, formatDuration4(0L))
                viewModel.setMain(null, false)
                runCatching { ClockService.stopTimer(requireContext()) }
            }
        }.start()

        runCatching { ClockService.startTimer(requireContext(), remain) }
        scheduleExactAlarm(endAt, "메인 타이머")
    }

    // -------- 유틸 --------
    private fun updateNow() {
        val now = Calendar.getInstance()
        val h = now.get(Calendar.HOUR_OF_DAY)
        val m = now.get(Calendar.MINUTE)
        val s = now.get(Calendar.SECOND)
        val ms = now.get(Calendar.MILLISECOND) * 10
        currentTimeText.text = String.format(Locale.getDefault(), "%02d:%02d:%02d:%04d", h, m, s, ms)
    }

    private fun formatDuration4(msTotal: Long): String {
        val m = max(0L, msTotal)
        val h = (m / 3_600_000) % 100
        val mm = (m / 60_000) % 60
        val s = (m / 1_000) % 60
        val ms4 = (m % 1_000) * 10
        return String.format(Locale.getDefault(), "%02d:%02d:%02d:%04d", h, mm, s, ms4)
    }

    private fun showRenameDialog(target: TextView, onRenamed: ((String) -> Unit)? = null) {
        val input = EditText(requireContext()).apply {
            inputType = InputType.TYPE_CLASS_TEXT
            setText(target.text?.toString() ?: "")
            setSelection(text.length)
        }
        AlertDialog.Builder(requireContext())
            .setTitle("라벨 변경")
            .setView(input)
            .setPositiveButton("확인") { dlg, _ ->
                val txt = input.text?.toString()?.ifBlank { "타이머" } ?: "타이머"
                target.text = txt
                onRenamed?.invoke(txt)
                dlg.dismiss()
            }
            .setNegativeButton("취소") { dlg, _ -> dlg.dismiss() }
            .show()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        mainTimer?.cancel()
        ticker?.let { handler.removeCallbacks(it) }
    }
}
