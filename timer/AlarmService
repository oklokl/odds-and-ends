package com.krdonon.timer.alarm

import android.app.KeyguardManager
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.media.MediaPlayer
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import androidx.core.app.NotificationCompat
import com.krdonon.timer.R

class AlarmService : Service() {

    companion object {
        private const val CHANNEL_ID = "ALARM_CHANNEL_V5"
        private const val NOTIFICATION_ID = 987654

        const val ACTION_START = "com.krdonon.timer.alarm.ACTION_START"
        const val ACTION_STOP  = "com.krdonon.timer.alarm.ACTION_STOP"
        const val EXTRA_LABEL  = "extra_label"

        internal const val PREFS = "alarm_prefs"
        internal const val KEY_RINGING = "ringing"
        internal const val KEY_STARTED_FROM_KEYGUARD = "started_from_keyguard"

        /** 알람 시작 */
        fun start(context: Context, label: String) {
            val intent = Intent(context, AlarmService::class.java).apply {
                action = ACTION_START
                putExtra(EXTRA_LABEL, label)
            }
            try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    context.startForegroundService(intent)
                } else {
                    context.startService(intent)
                }
            } catch (_: Throwable) {
                // 실패 시 최소한 정리
                forceStop(context)
            }
        }

        /** 알람 정지 요청 */
        fun stop(context: Context) {
            val intent = Intent(context, AlarmService::class.java).apply { action = ACTION_STOP }
            try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    context.startForegroundService(intent)
                } else {
                    context.startService(intent)
                }
            } catch (_: Throwable) {
                // 실패하면 바로 강제 종료
                forceStop(context)
            }
        }

        /** 강제 정지 (예외 대비) */
        fun forceStop(context: Context) {
            try { context.stopService(Intent(context, AlarmService::class.java)) } catch (_: Throwable) {}

            try {
                val nm = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                nm.cancel(NOTIFICATION_ID)
            } catch (_: Throwable) {}

            try {
                context.getSharedPreferences(PREFS, Context.MODE_PRIVATE).edit()
                    .putBoolean(KEY_RINGING, false)
                    .apply()
            } catch (_: Throwable) {}
        }
    }

    private var mediaPlayer: MediaPlayer? = null
    private val stopHandler = Handler(Looper.getMainLooper())

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when (intent?.action) {
            ACTION_START -> {
                val label = intent.getStringExtra(EXTRA_LABEL) ?: "Timer Alarm"
                startAlarm(label)
            }
            ACTION_STOP -> {
                // STOP 인텐트가 들어오면 즉시 알람 중지
                stopAlarm()
            }
        }
        return START_NOT_STICKY
    }

    private fun startAlarm(label: String) {
        val nm = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        createOrUpdateChannel(nm)

        val alarmIntent = Intent(this, AlarmActivity::class.java).apply {
            putExtra(EXTRA_LABEL, label)
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        val pi = PendingIntent.getActivity(
            this, 0, alarmIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification: Notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("⏰ 타이머 종료")
            .setContentText(label)
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setAutoCancel(true)
            .setOngoing(true)
            .setFullScreenIntent(pi, true)
            .build()

        startForeground(NOTIFICATION_ID, notification)

        // 잠금 여부 기록
        val km = getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager
        val startedFromKeyguard = km.isKeyguardLocked
        getSharedPreferences(PREFS, Context.MODE_PRIVATE).edit()
            .putBoolean(KEY_RINGING, true)
            .putBoolean(KEY_STARTED_FROM_KEYGUARD, startedFromKeyguard)
            .apply()

        // 소리 반복 + 5분 후 자동 종료
        try {
            stopHandler.removeCallbacksAndMessages(null)

            // 이전 플레이어가 남아 있으면 정리
            mediaPlayer?.release()
            mediaPlayer = null

            mediaPlayer = MediaPlayer.create(this, R.raw.alarm_sound)?.apply {
                isLooping = true
                setVolume(1.0f, 1.0f)
                start()
            }

            stopHandler.postDelayed({ stopAlarm() }, 5 * 60 * 1000L)

        } catch (_: Throwable) { }
    }

    private fun stopAlarm() {
        stopHandler.removeCallbacksAndMessages(null)

        // ✅ MediaPlayer 무조건 해제
        try {
            mediaPlayer?.apply {
                try { if (isPlaying) stop() } catch (_: Throwable) {}
                release()
            }
        } catch (_: Throwable) { }
        mediaPlayer = null

        // 상태 플래그 정리
        getSharedPreferences(PREFS, Context.MODE_PRIVATE).edit()
            .putBoolean(KEY_RINGING, false)
            .apply()

        try { stopForeground(STOP_FOREGROUND_REMOVE) } catch (_: Throwable) {}
        try { stopSelf() } catch (_: Throwable) {}
    }

    override fun onDestroy() {
        // 서비스 종료 시 무조건 소리 정리
        stopAlarm()
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private fun createOrUpdateChannel(nm: NotificationManager) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID, "Timer Alarm", NotificationManager.IMPORTANCE_HIGH
            ).apply {
                lockscreenVisibility = Notification.VISIBILITY_PUBLIC
                description = "타이머 알림 채널"
                setSound(null, null) // MediaPlayer가 담당
            }
            nm.createNotificationChannel(channel)
        }
    }
}
